services:
  # Neo4j Database
  neo4j:
    image: neo4j:5.15-community
    container_name: codon-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_PLUGINS: '["graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      # Note: Prometheus metrics not available in Community edition
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - codon-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: codon-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - codon-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: codon-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - codon-network

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:10.0.0
    container_name: codon-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - codon-network
    depends_on:
      - prometheus

  # Neo4j MCP Server
  neo4j-mcp:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-servers
      target: neo4j-mcp
    container_name: codon-neo4j-mcp
    ports:
      - "8001:8001"
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: password123
      NEO4J_DATABASE: neo4j
      MCP_SERVER_PORT: 8001
      MCP_SERVER_NAME: neo4j-mcp-server
    networks:
      - codon-network
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus MCP Server
  prometheus-mcp:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-servers
      target: prometheus-mcp
    container_name: codon-prometheus-mcp
    ports:
      - "8000:8000"
    environment:
      PROMETHEUS_URL: http://prometheus:9090
      MCP_SERVER_PORT: 8000
      MCP_SERVER_NAME: prometheus-mcp-server
    networks:
      - codon-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Agent Web Interface
  agent-web:
    build:
      context: .
      dockerfile: docker/Dockerfile.agents
    container_name: codon-agent-web
    ports:
      - "8080:5000"
    environment:
      # LLM Configuration
      LLM_PROVIDER: openai
      LLM_MODEL: gpt-3.5-turbo
      LLM_TEMPERATURE: 0.1
      LLM_MAX_TOKENS: 4000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # LangSmith Tracing
      LANGSMITH_ENABLED: ${LANGSMITH_ENABLED:-false}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGSMITH_PROJECT: ${LANGSMITH_PROJECT:-codon-kg-agents}
      LANGSMITH_ENDPOINT: ${LANGSMITH_ENDPOINT:-https://api.smith.langchain.com}
      LANGSMITH_TRACING: ${LANGSMITH_TRACING:-true}
      LANGSMITH_SESSION: ${LANGSMITH_SESSION:-}
      
      # Neo4j Configuration
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: password123
      NEO4J_DATABASE: neo4j
      NEO4J_MCP_URL: http://neo4j-mcp:8001/mcp
      NEO4J_MCP_TRANSPORT: streamable_http
      
      # Prometheus Configuration
      PROMETHEUS_URL: http://prometheus:9090
      PROMETHEUS_MCP_URL: http://prometheus-mcp:8000/mcp
      PROMETHEUS_MCP_TRANSPORT: streamable_http
      
      # AWS Configuration (Optional)
      AWS_REGION: us-east-1
      AWS_PROFILE: 
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY: 
      TERRAFORM_DIR: /app/terraform
      
      # Security
      AGENT_SECRET_KEY: docker-secret-key-change-in-production
      ENABLE_AUDIT_LOGGING: true
      MAX_RETRY_ATTEMPTS: 3
      COMMAND_TIMEOUT: 300
    volumes:
      - ./terraform:/app/terraform:ro  # Mount terraform configs as read-only
    networks:
      - codon-network
    depends_on:
      - neo4j
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Agent CLI (for running commands)
  agent-cli:
    build:
      context: .
      dockerfile: docker/Dockerfile.agents
    container_name: codon-agent-cli
    environment:
      # Same environment as agent-web
      LLM_PROVIDER: openai
      LLM_MODEL: gpt-4.1-mini
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # LangSmith Tracing
      LANGSMITH_ENABLED: ${LANGSMITH_ENABLED:-false}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGSMITH_PROJECT: ${LANGSMITH_PROJECT:-codon-kg-agents}
      LANGSMITH_ENDPOINT: ${LANGSMITH_ENDPOINT:-https://api.smith.langchain.com}
      LANGSMITH_TRACING: ${LANGSMITH_TRACING:-true}
      
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: password123
      NEO4J_DATABASE: neo4j
      NEO4J_MCP_URL: http://neo4j-mcp:8001/mcp
      PROMETHEUS_URL: http://prometheus:9090
      PROMETHEUS_MCP_URL: http://prometheus-mcp:8000/mcp
    volumes:
      - ./terraform:/app/terraform:ro
    networks:
      - codon-network
    depends_on:
      - agent-web
    profiles:
      - cli  # Only start when explicitly requested
    command: tail -f /dev/null  # Keep container running for exec commands

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  prometheus_data:
  grafana_data:

networks:
  codon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16